type Query {
    info: String!
    #   feed: [Link!]!
    #   link(id: ID!): Link
    # feed(filter: String): [Link!]!
    # feed(filter: String, skip: Int, first: Int): [Link!]!
    #feed(
    #   filter: String
    #   skip: Int
    #   first: Int
    #  orderBy: LinkOrderByInput
    #): [Link!]!
    feed(
        filter: String
        skip: Int
        first: Int
        orderBy: LinkOrderByInput
    ): Feed!
}

type Feed {
    links: [Link!]!
    count: Int!
}

type Vote {
    id: ID!
    link: Link!
    user: User!
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    votes: [Vote!]
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
}

type Subscription {
    newLink: Link
    newVote: Vote
}

type Mutation {
    post(url: String!, description: String!): Link!
    update(id: ID!, url: String, description: String): Link
    delete(id: ID!): Link
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    vote(linkId: ID!): Vote
}

enum LinkOrderByInput {
    description_ASC
    description_DESC
    url_ASC
    url_DESC
    createdAt_ASC
    createdAt_DESC
}
